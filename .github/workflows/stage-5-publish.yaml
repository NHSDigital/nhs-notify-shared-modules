name: "Publish stage"

on:
  workflow_call:
    inputs:
      build_datetime:
        description: "Build datetime, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_timestamp:
        description: "Build timestamp, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_epoch:
        description: "Build epoch, set by the CI/CD pipeline workflow"
        required: true
        type: string
      nodejs_version:
        description: "Node.js version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      python_version:
        description: "Python version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      terraform_version:
        description: "Terraform version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      version:
        description: "Version of the software, set by the CI/CD pipeline workflow"
        required: true
        type: string
      is_version_prerelease:
        description: "Is this a semantically versioned pre release, set by the CI/CD pipeline workflow"
        required: true
        type: string
jobs:
  publish:
    name: "Publish packages"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    permissions:
      contents: write
      packages: write
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Get the artefacts"
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: "Create release"
        id: create_release
        uses: actions/create-release@v1
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version }}
          release_name: ${{ inputs.version }}
          body: |
            Release of ${{ inputs.version }}
          draft: false
          prerelease: ${{ inputs.is_version_prerelease == 'true'}}

      #- name: "tar gz jekyll docs release asset"
      #   # Git hub pages needs a single tar called artifact inside the zip.
      #  working-directory: ./artifacts/jekyll-docs-${{ inputs.version }}
      #  run: zip jekyll-docs-${{ inputs.version }}.zip ./artifact.tar
      #  shell: bash
      - name: "Upload jeykll docs release asset"
        uses: actions/upload-release-asset@v1
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: "${{ steps.create_release.outputs.upload_url }}"
          asset_path: ./artifacts/jekyll-docs-${{ inputs.version }}/artifact.tar
          asset_name: jekyll-docs-${{ inputs.version }}.tar
          asset_content_type: "application/gzip"

      - name: "Package and Publish Terraform modules"
        run: |
          cd infrastructure/modules
          for module in */; do
            module_name=${module%/}
            zip -r "../../artifacts/terraform-${module_name}-${{ inputs.version }}.zip" "$module_name"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Upload Terraform module artifacts"
        shell: bash
        run: |
          for file in ./artifacts/terraform-*.zip; do
            artifact_name=$(basename "$file" .zip)
            echo "Uploading $file as artifact $artifact_name"
            gh api \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/actions/artifacts \
              -F name="$artifact_name" \
              -F file=@"$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # uses: actions/upload-artifact@v4
        # with:
        #   name: terraform-modules-${{ inputs.version }}
        #   path: ./artifacts/terraform-*.zip
        #   overwrite: true
  success:
    name: "Success notification"
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - name: "Check prerequisites for notification"
        id: check
        run: echo "secret_exist=${{ secrets.TEAMS_NOTIFICATION_WEBHOOK_URL != '' }}" >> $GITHUB_OUTPUT
      - name: "Notify on publishing packages"
        if: steps.check.outputs.secret_exist == 'true'
        uses: nhs-england-tools/notify-msteams-action@v1.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          teams-webhook-url: ${{ secrets.TEAMS_NOTIFICATION_WEBHOOK_URL }}
          message-title: "Notification title"
          message-text: "This is a notification body"
          link: ${{ github.event.pull_request.html_url }}
